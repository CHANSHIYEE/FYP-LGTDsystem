package shiyee_FYP.fullstack_backend.controller;

import lombok.AllArgsConstructor;
import lombok.Data;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import shiyee_FYP.fullstack_backend.Service.VulnerabilityService;
import shiyee_FYP.fullstack_backend.model.LocRelation;
import shiyee_FYP.fullstack_backend.model.Location;
import shiyee_FYP.fullstack_backend.repository.ChinaCompanyRepository;
import shiyee_FYP.fullstack_backend.repository.LocationRelationRepository;
import shiyee_FYP.fullstack_backend.repository.LocationRepository;

import java.util.HashMap;
import java.util.List;

import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/v")
public class VulnerabilityController {

    private final VulnerabilityService vulnerabilityService;
    private final LocationRepository locationRepo;
    private final ChinaCompanyRepository companyRepo;
    private final LocationRelationRepository locationRelationRepo;

    public VulnerabilityController(VulnerabilityService vulnerabilityService,
                                   LocationRepository locationRepo, ChinaCompanyRepository companyRepo, LocationRelationRepository locationRelationRepo) {
        this.vulnerabilityService = vulnerabilityService;
        this.locationRepo = locationRepo;
        this.companyRepo = companyRepo;
        this.locationRelationRepo = locationRelationRepo;
    }

    /**
     * 触发全量计算
     * POST /api/vulnerability/calculate-all
     */
    @PostMapping("/calculate-all")
    public ResponseEntity<ApiResponse<String>> calculateAll() {
        vulnerabilityService.calculateAllVulnerabilityScores();
        return ResponseEntity.ok(
                ApiResponse.success("All scores updated successfully")
        );
    }

    /**
     * 计算单个节点
     * GET /api/vulnerability/calculate/{id}
     */
    @GetMapping("/calculate/{id}")
    public ResponseEntity<ApiResponse<Double>> calculateSingle(
            @PathVariable Integer id
    ) {
        double score = vulnerabilityService.calculateSingleNodeScore(id);
        return ResponseEntity.ok(
                ApiResponse.success(score)
        );
    }

    /**
     * 获取高风险节点
     * GET /api/vulnerability/high-risk?threshold=0.7
     */
    @GetMapping("/high-risk")
    public ResponseEntity<ApiResponse<List<Location>>> getHighRisk(
            @RequestParam(defaultValue = "0.7") Double threshold
    ) {
        List<Location> highRiskNodes = locationRepo
                .findByVulnerabilityScoreGreaterThanEqualOrderByVulnerabilityScoreDesc(threshold);
        return ResponseEntity.ok(
                ApiResponse.success(highRiskNodes)
        );
    }

    /**
     * 验证计算一致性
     * GET /api/vulnerability/verify/{id}
     */
    @GetMapping("/verify/{id}")
    public ResponseEntity<ApiResponse<Map<String, Object>>> verifyCalculation(
            @PathVariable Integer id
    ) {
        // 全量计算
        vulnerabilityService.calculateAllVulnerabilityScores();
        double fullCalcScore = locationRepo.findById(id)
                .orElseThrow().getVulnerabilityScore();

        // 单独计算
        double singleCalcScore = vulnerabilityService.calculateSingleNodeScore(id);

        return ResponseEntity.ok(
                ApiResponse.success(Map.of(
                        "fullCalculationScore", fullCalcScore,
                        "singleCalculationScore", singleCalcScore,
                        "isConsistent", Math.abs(fullCalcScore - singleCalcScore) < 0.001
                ))
        );
    }

    // 统一响应格式
    public record ApiResponse<T>(
            String status,
            String message,
            T data
    ) {
        public static <T> ApiResponse<T> success(T data) {
            return new ApiResponse<>("SUCCESS", null, data);
        }
        public static ApiResponse<String> success(String message) {
            return new ApiResponse<>("SUCCESS", message, null);
        }
    }
    @GetMapping("/graph")
    public ResponseEntity<Map<String, Object>> getSupplyChainGraph() {
        List<Location> locations = locationRepo.findAll();
        List<LocRelation> relations = locationRelationRepo.findAll();

        // 构建节点数据
        List<Map<String, Object>> nodes = locations.stream().map(loc -> {
            Map<String, Object> node = new HashMap<>();
            node.put("id", loc.getId());
            node.put("name", loc.getName());
            node.put("type", loc.getType().name());
            node.put("vulnerabilityScore", loc.getVulnerabilityScore());
            return node;
        }).collect(Collectors.toList());

        // 构建边数据
        List<Map<String, Object>> links = relations.stream().map(rel -> {
            Map<String, Object> link = new HashMap<>();
            link.put("source", rel.getSource().getId());
            link.put("target", rel.getTarget().getId());
            link.put("relationType", rel.getRelationType().name());
            return link;
        }).collect(Collectors.toList());

        return ResponseEntity.ok(Map.of(
                "nodes", nodes,
                "links", links
        ));
    }
    /**
     * 获取供应链节点表格数据
     * GET /api/vulnerability/nodes-table
     */
    @GetMapping("/nodes-table")
    public ResponseEntity<List<NodeTableDTO>> getNodesTableData() {
        List<Location> locations = locationRepo.findAll();
        List<LocRelation> relations = locationRelationRepo.findAll();

        List<NodeTableDTO> result = locations.stream().map(location -> {
            // 计算连接节点数
            long connectionCount = relations.stream()
                    .filter(r -> r.getSource().getId().equals(location.getId()) ||
                            r.getTarget().getId().equals(location.getId()))
                    .count();

            return new NodeTableDTO(
                    location.getId(),
                    location.getName(),
                    location.getType(),
                    location.getVulnerabilityScore(),
                    connectionCount
            );
        }).collect(Collectors.toList());

        return ResponseEntity.ok(result);
    }

    /**
     * 获取节点评分详情
     * GET /api/vulnerability/score-detail/{locationId}
     */
    @GetMapping("/score-detail/{locationId}")
    public ResponseEntity<ScoreDetailDTO> getScoreDetail(
            @PathVariable Integer locationId
    ) {
        Location location = locationRepo.findById(locationId).orElseThrow();
        List<Location> allLocations = locationRepo.findAll();
        List<LocRelation> allRelations = locationRelationRepo.findAll();
        int maxEmployees = companyRepo.findMaxEmployeeCount();

        // 计算各项分数
        double semanticScore = vulnerabilityService.calculateSemanticScore(location, allRelations);
//        double companyScore = vulnerabilityService.calculateCompanyScore(location, maxEmployees);
        double uniquenessScore = vulnerabilityService.calculateUniquenessScore(location, allLocations, allRelations);

        // 获取关联节点
        List<RelatedNodeDTO> relatedNodes = allRelations.stream()
                .filter(r -> r.getSource().getId().equals(locationId) ||
                        r.getTarget().getId().equals(locationId))
                .map(r -> {
                    Location relatedLoc = r.getSource().getId().equals(locationId) ?
                            r.getTarget() : r.getSource();
                    return new RelatedNodeDTO(
                            relatedLoc.getId(),
                            relatedLoc.getName(),
                            relatedLoc.getType(),
                            r.getRelationType()
                    );
                }).collect(Collectors.toList());

        return ResponseEntity.ok(new ScoreDetailDTO(
                locationId,
                location.getName(),
                semanticScore,
//                companyScore,
                uniquenessScore,
                relatedNodes
        ));
    }

    // DTO定义
    @Data
    @AllArgsConstructor
    public static class NodeTableDTO {
        private Integer id;
        private String name;
        private Location.LocationType type;
        private Double vulnerabilityScore;
        private Long connectionCount;
    }

    @Data
    @AllArgsConstructor
    public static class ScoreDetailDTO {
        private Integer locationId;
        private String locationName;
        private Double semanticScore;
//        private Double companyScore;
        private Double uniquenessScore;
        private List<RelatedNodeDTO> relatedNodes;
    }

    @Data
    @AllArgsConstructor
    public static class RelatedNodeDTO {
        private Integer id;
        private String name;
        private Location.LocationType type;
        private LocRelation.RelationType relationType;
    }

}